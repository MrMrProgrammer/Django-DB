# Generated by Django 5.0.4 on 2024-04-22 04:16

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Brand',
            },
        ),
        migrations.CreateModel(
            name='CacheSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_size', models.IntegerField()),
            ],
            options={
                'verbose_name': 'CacheSize',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Category',
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color_name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Color',
            },
        ),
        migrations.CreateModel(
            name='CPUCo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpu_company', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'CPUCo',
            },
        ),
        migrations.CreateModel(
            name='CPUModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpu_model', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'CPUModel',
            },
        ),
        migrations.CreateModel(
            name='CPUSeries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpu_series', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'CPUSeries',
            },
        ),
        migrations.CreateModel(
            name='GPUCo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gpu_company', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'GPUCo',
            },
        ),
        migrations.CreateModel(
            name='GPUModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gpu_model', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'GPUModel',
            },
        ),
        migrations.CreateModel(
            name='GPUSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gpu_size', models.IntegerField()),
            ],
            options={
                'verbose_name': 'GPUSize',
            },
        ),
        migrations.CreateModel(
            name='HardDiskSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hard_disk_size', models.IntegerField()),
            ],
            options={
                'verbose_name': 'HardDiskSize',
            },
        ),
        migrations.CreateModel(
            name='HardDiskType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'HardDiskType',
            },
        ),
        migrations.CreateModel(
            name='RamSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ram', models.IntegerField()),
            ],
            options={
                'verbose_name': 'RamSize',
            },
        ),
        migrations.CreateModel(
            name='RamType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ram_type', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'RamType',
            },
        ),
        migrations.CreateModel(
            name='ScreenSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screen_size', models.FloatField()),
            ],
            options={
                'verbose_name': 'ScreenSize',
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Store',
            },
        ),
        migrations.CreateModel(
            name='Laptop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(max_length=200)),
                ('Weight', models.IntegerField()),
                ('price', models.IntegerField()),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.brand')),
                ('cache_size', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.cachesize')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.category')),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.color')),
                ('cpu_Company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.cpuco')),
                ('cpu_Model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.cpumodel')),
                ('cpu_series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.cpuseries')),
                ('gpu_Co', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.gpuco')),
                ('gpu_Model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.gpumodel')),
                ('gpu_size', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.gpusize')),
                ('hard_disk_size', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.harddisksize')),
                ('hard_disk_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.harddisktype')),
                ('ram_size', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.ramsize')),
                ('ram_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.ramtype')),
                ('screen_size', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.screensize')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Laptop.store')),
            ],
            options={
                'verbose_name': 'Laptop',
            },
        ),
    ]
